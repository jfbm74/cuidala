{"remainingRequest":"/home/retr-0/cuidala/front-end/index/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/home/retr-0/cuidala/front-end/index/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/retr-0/cuidala/front-end/index/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/retr-0/cuidala/front-end/index/src/components/SliderArea.vue?vue&type=template&id=2444483e&scoped=true&","dependencies":[{"path":"/home/retr-0/cuidala/front-end/index/src/components/SliderArea.vue","mtime":1615435066901},{"path":"/home/retr-0/cuidala/front-end/index/node_modules/cache-loader/dist/cjs.js","mtime":1615255675933},{"path":"/home/retr-0/cuidala/front-end/index/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1615255673833},{"path":"/home/retr-0/cuidala/front-end/index/node_modules/cache-loader/dist/cjs.js","mtime":1615255675933},{"path":"/home/retr-0/cuidala/front-end/index/node_modules/vue-loader/lib/index.js","mtime":1615255673833}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}
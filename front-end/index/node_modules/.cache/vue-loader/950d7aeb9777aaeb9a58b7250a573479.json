{"remainingRequest":"/home/retr-0/cuidala/front-end/index/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/home/retr-0/cuidala/front-end/index/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/retr-0/cuidala/front-end/index/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/retr-0/cuidala/front-end/index/src/components/Navegacion.vue?vue&type=template&id=f451971e&","dependencies":[{"path":"/home/retr-0/cuidala/front-end/index/src/components/Navegacion.vue","mtime":1615506059815},{"path":"/home/retr-0/cuidala/front-end/index/node_modules/cache-loader/dist/cjs.js","mtime":1615255675933},{"path":"/home/retr-0/cuidala/front-end/index/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1615255673833},{"path":"/home/retr-0/cuidala/front-end/index/node_modules/cache-loader/dist/cjs.js","mtime":1615255675933},{"path":"/home/retr-0/cuidala/front-end/index/node_modules/vue-loader/lib/index.js","mtime":1615255673833}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkgewogIHZhciBfdm0gPSB0aGlzCiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgcmV0dXJuIF9jKAogICAgImRpdiIsCiAgICB7IHN0YXRpY0NsYXNzOiAiaGVhZGVyIG5hdmVnYWNpb24iLCBhdHRyczogeyBpZDogImhlYWRlciIgfSB9LAogICAgWwogICAgICBfYygKICAgICAgICAiZGl2IiwKICAgICAgICB7CiAgICAgICAgICBzdGF0aWNDbGFzczogIm1haW5tZW51X19tZW51X193cmFwIGJnLXdoaXRlIHN0aWNreV9faGVhZGVyIGhpZGRlbi14cyIsCiAgICAgICAgICBhdHRyczogeyBpZDogInN0aWNreS1oZWFkZXItd2l0aC10b3BiYXIiIH0KICAgICAgICB9LAogICAgICAgIFsKICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAibWFpbm1lbnVfX21lbnVfX2lubmVyIiB9LCBbCiAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29udGFpbmVyIiB9LCBbCiAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJyb3ciIH0sIFsKICAgICAgICAgICAgICAgIF92bS5fbSgwKSwKICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29sLW1kLTggY29sLWxnLTggY29sLXNtLTEwIiB9LCBbCiAgICAgICAgICAgICAgICAgIF9jKCJuYXYiLCB7IHN0YXRpY0NsYXNzOiAibWFpbm1lbnVfX25hdiIgfSwgWwogICAgICAgICAgICAgICAgICAgIF9jKCJ1bCIsIHsgc3RhdGljQ2xhc3M6ICJtYWluX19tZW51IiB9LCBbCiAgICAgICAgICAgICAgICAgICAgICBfYygibGkiLCB7IHN0YXRpY0NsYXNzOiAiZHJvcCIgfSwgWwogICAgICAgICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAgICAgICAiYSIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoInJvdXRlci1saW5rIiwgeyBhdHRyczogeyB0bzogIi8iIH0gfSwgWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIkluaWNpbyIpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgMQogICAgICAgICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICAgICAgICBfdm0uX20oMSkKICAgICAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICAgICAgX3ZtLl9tKDIpLAogICAgICAgICAgICAgICAgICAgICAgX3ZtLl9tKDMpLAogICAgICAgICAgICAgICAgICAgICAgX3ZtLl9tKDQpLAogICAgICAgICAgICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAgICAgICAiYSIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgeyBhdHRyczogeyBocmVmOiAibG9naW4uaHRtbCIgfSB9LAogICAgICAgICAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJyb3V0ZXItbGluayIsIHsgYXR0cnM6IHsgdG86ICIvbG9naW4iIH0gfSwgWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoInNlc2nDs24iKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgICAgICAgICAgIDEKICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgICAgICAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAicmVnaXN0cm8iIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoInJvdXRlci1saW5rIiwgeyBhdHRyczogeyB0bzogIi9yZWdpc3RybyIgfSB9LCBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigiUmVnaXN0cm8iKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgICAgICAgICAgIDEKICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICBfdm0uX20oNSkKICAgICAgICAgICAgICBdKQogICAgICAgICAgICBdKQogICAgICAgICAgXSkKICAgICAgICBdCiAgICAgICksCiAgICAgIF92bS5fdigiLS0+ICIpLAogICAgICBfYygKICAgICAgICAiZGl2IiwKICAgICAgICB7IHN0YXRpY0NsYXNzOiAibW9iaWxlLW1lbnUtYXJlYSBoaWRkZW4tbWQgaGlkZGVuLWxnIGhpZGRlbi1zbSIgfSwKICAgICAgICBbCiAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImZsdWlkLWNvbnRhaW5lciBtb2JpbGUtbWVudS1jb250YWluZXIiIH0sIFsKICAgICAgICAgICAgX3ZtLl9tKDYpLAogICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogIm1vYmlsZS1tZW51IGNsZWFyZml4IiB9LCBbCiAgICAgICAgICAgICAgX2MoIm5hdiIsIHsgYXR0cnM6IHsgaWQ6ICJtb2JpbGVfZHJvcGRvd24iIH0gfSwgWwogICAgICAgICAgICAgICAgX2MoInVsIiwgWwogICAgICAgICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgICAiYSIsCiAgICAgICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJyb3V0ZXItbGluayIsIHsgYXR0cnM6IHsgdG86ICIvIiB9IH0sIFsKICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoImhvbWUiKQogICAgICAgICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICAgICAgIDEKICAgICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICAgIF92bS5fbSg3KQogICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgX3ZtLl9tKDgpLAogICAgICAgICAgICAgICAgICBfdm0uX20oOSksCiAgICAgICAgICAgICAgICAgIF92bS5fbSgxMCksCiAgICAgICAgICAgICAgICAgIF92bS5fbSgxMSksCiAgICAgICAgICAgICAgICAgIF92bS5fbSgxMikKICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgXSkKICAgICAgICAgIF0pCiAgICAgICAgXQogICAgICApCiAgICBdCiAgKQp9CnZhciBzdGF0aWNSZW5kZXJGbnMgPSBbCiAgZnVuY3Rpb24oKSB7CiAgICB2YXIgX3ZtID0gdGhpcwogICAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2gKICAgIHJldHVybiBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbC1tZC0zIGNvbC1sZy0zIGNvbC1zbS0xMiIgfSwgWwogICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImxvZ28iIH0sIFsKICAgICAgICBfYygiYSIsIHsgYXR0cnM6IHsgaHJlZjogImluZGV4Lmh0bWwiIH0gfSkKICAgICAgXSkKICAgIF0pCiAgfSwKICBmdW5jdGlvbigpIHsKICAgIHZhciBfdm0gPSB0aGlzCiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnQKICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogICAgcmV0dXJuIF9jKCJ1bCIsIHsgc3RhdGljQ2xhc3M6ICJkcm9wZG93biIgfSwgWwogICAgICBfYygibGkiLCBbCiAgICAgICAgX2MoImEiLCB7IGF0dHJzOiB7IGhyZWY6ICJpbmRleC1hbmltYXRpb24tdGV4dC0xLmh0bWwiIH0gfSwgWwogICAgICAgICAgX3ZtLl92KCJhbmltYXRpb24gdGV4dCAxIikKICAgICAgICBdKQogICAgICBdKQogICAgXSkKICB9LAogIGZ1bmN0aW9uKCkgewogICAgdmFyIF92bSA9IHRoaXMKICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgICByZXR1cm4gX2MoImxpIiwgWwogICAgICBfYygiYSIsIHsgYXR0cnM6IHsgaHJlZjogImFib3V0Lmh0bWwiIH0gfSwgW192bS5fdigiTm9zb3Ryb3MiKV0pCiAgICBdKQogIH0sCiAgZnVuY3Rpb24oKSB7CiAgICB2YXIgX3ZtID0gdGhpcwogICAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2gKICAgIHJldHVybiBfYygibGkiLCB7IHN0YXRpY0NsYXNzOiAiZHJvcCIgfSwgWwogICAgICBfYygiYSIsIHsgYXR0cnM6IHsgaHJlZjogIiMiIH0gfSwgW192bS5fdigiQ3VpZGFkb3JlcyIpXSkKICAgIF0pCiAgfSwKICBmdW5jdGlvbigpIHsKICAgIHZhciBfdm0gPSB0aGlzCiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnQKICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogICAgcmV0dXJuIF9jKCJsaSIsIFsKICAgICAgX2MoImEiLCB7IGF0dHJzOiB7IGhyZWY6ICJjb250YWN0Lmh0bWwiIH0gfSwgW192bS5fdigiQ29udGFjdG8iKV0pCiAgICBdKQogIH0sCiAgZnVuY3Rpb24oKSB7CiAgICB2YXIgX3ZtID0gdGhpcwogICAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2gKICAgIHJldHVybiBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbC1tZC0xIGNvbC1sZy0xIGNvbC1zbS0yIiB9LCBbCiAgICAgIF9jKCJkaXYiLCBbCiAgICAgICAgX2MoInVsIiwgeyBzdGF0aWNDbGFzczogImNhcnRfX3NlYXJjaF9fbGlzdCIgfSwgWwogICAgICAgICAgX2MoImxpIiwgeyBzdGF0aWNDbGFzczogImNhcnRfX21lbnUiIH0pCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiZHJvcGRvd25fX3Nob3BwaW5nX19iYXNrZXQiIH0sIFsKICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInNob3BwaW5nX19iYXNrZXRfbm90aWNlcyIgfSwgWwogICAgICAgICAgX2MoImVtIiwgeyBzdGF0aWNDbGFzczogImNvbG9yIG1haW4tZm9udCIgfSwgWwogICAgICAgICAgICBfdm0uX3YoIllvdXIgVG90YWwgaXRlbSAoMDIpIikKICAgICAgICAgIF0pLAogICAgICAgICAgX2MoInNwYW4iLCB7IHN0YXRpY0NsYXNzOiAiY2xvc2UgaWNvbi1jbGVhciBwdWxsLXJpZ2h0IiB9LCBbCiAgICAgICAgICAgIF9jKCJpIiwgeyBzdGF0aWNDbGFzczogInptZGkgem1kaS1jbG9zZSIgfSkKICAgICAgICAgIF0pCiAgICAgICAgXSksCiAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJ0b3AtY2FydC1jb250ZW50IiB9LCBbCiAgICAgICAgICBfYygidWwiLCB7IHN0YXRpY0NsYXNzOiAibWluaS1wcm9kdWN0cy1saXN0IiB9LCBbCiAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICBfYygiYSIsIHsKICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAic2hvcHBpbmctaW1hZ2UiLAogICAgICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogInNpbmdsZS1wcm9kdWN0Lmh0bWwiIH0KICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInNob3BwaW5nLXByb2R1Y3QtZGV0YWlscyIgfSwgWwogICAgICAgICAgICAgICAgX2MoInAiLCB7IHN0YXRpY0NsYXNzOiAiY2FydHByb2R1Y3QtbmFtZSIgfSwgWwogICAgICAgICAgICAgICAgICBfYygiYSIsIHsgYXR0cnM6IHsgaHJlZjogInNpbmdsZS1wcm9kdWN0Lmh0bWwiIH0gfSwgWwogICAgICAgICAgICAgICAgICAgIF92bS5fdigiUGVsbGVudGVzcXVlIGhhYml0YW50ICIpCiAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgIF9jKCJzdHJvbmciLCB7IHN0YXRpY0NsYXNzOiAicXR5IiB9LCBbX3ZtLl92KCJxdHk6MSIpXSksCiAgICAgICAgICAgICAgICBfYygic3BhbiIsIHsgc3RhdGljQ2xhc3M6ICJzaWctcHJpY2UiIH0sIFtfdm0uX3YoIiQyMjIuMDAiKV0pCiAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJzaG9wcGluZy1wcm8tYWN0aW9uIiB9LCBbCiAgICAgICAgICAgICAgICBfYygiYSIsIHsgc3RhdGljQ2xhc3M6ICJidG4tcmVtb3ZlIiwgYXR0cnM6IHsgaHJlZjogIiMiIH0gfSwgWwogICAgICAgICAgICAgICAgICBfdm0uX3YoInJlbW92ZSIpCiAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgIF9jKCJhIiwgeyBzdGF0aWNDbGFzczogImJ0bi1lZGl0IiwgYXR0cnM6IHsgaHJlZjogIiMiIH0gfSwgWwogICAgICAgICAgICAgICAgICBfdm0uX3YoImVkaXQiKQogICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICBdKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgIF9jKCJhIiwgewogICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJzaG9wcGluZy1pbWFnZSIsCiAgICAgICAgICAgICAgICBhdHRyczogeyBocmVmOiAic2luZ2xlLXByb2R1Y3QuaHRtbCIgfQogICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAic2hvcHBpbmctcHJvZHVjdC1kZXRhaWxzIiB9LCBbCiAgICAgICAgICAgICAgICBfYygicCIsIHsgc3RhdGljQ2xhc3M6ICJjYXJ0cHJvZHVjdC1uYW1lIiB9LCBbCiAgICAgICAgICAgICAgICAgIF9jKCJhIiwgeyBhdHRyczogeyBocmVmOiAic2luZ2xlLXByb2R1Y3QuaHRtbCIgfSB9LCBbCiAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCJQZWxsZW50ZXNxdWUgaGFiaXRhbnQgIikKICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgX2MoInN0cm9uZyIsIHsgc3RhdGljQ2xhc3M6ICJxdHkiIH0sIFtfdm0uX3YoInF0eToxIildKSwKICAgICAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBzdGF0aWNDbGFzczogInNpZy1wcmljZSIgfSwgW192bS5fdigiJDIyMi4wMCIpXSkKICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInByby1hY3Rpb24iIH0sIFsKICAgICAgICAgICAgICAgIF9jKCJhIiwgeyBzdGF0aWNDbGFzczogImJ0bi1yZW1vdmUiLCBhdHRyczogeyBocmVmOiAiIyIgfSB9LCBbCiAgICAgICAgICAgICAgICAgIF92bS5fdigicmVtb3ZlIikKICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgX2MoImEiLCB7IHN0YXRpY0NsYXNzOiAiYnRuLWVkaXQiLCBhdHRyczogeyBocmVmOiAiIyIgfSB9LCBbCiAgICAgICAgICAgICAgICAgIF92bS5fdigiZWRpdCIpCiAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgIF0pCiAgICAgICAgICAgIF0pCiAgICAgICAgICBdKSwKICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAidG9wLXN1YnRvdGFsIiB9LCBbCiAgICAgICAgICAgIF92bS5fdigiIFN1YnRvdGFsOiAiKSwKICAgICAgICAgICAgX2MoInNwYW4iLCB7IHN0YXRpY0NsYXNzOiAic2lnLXByaWNlIiB9LCBbX3ZtLl92KCIkNDQ0LjAwIildKQogICAgICAgICAgXSksCiAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNhcnQtYWN0aW9ucyIgfSwgWwogICAgICAgICAgICBfYygiYnV0dG9uIiwgeyBzdGF0aWNDbGFzczogImNhcnQtYnRuIiB9LCBbCiAgICAgICAgICAgICAgX2MoInNwYW4iLCBbX3ZtLl92KCJDaGVja291dCIpXSkKICAgICAgICAgICAgXSkKICAgICAgICAgIF0pCiAgICAgICAgXSkKICAgICAgXSkKICAgIF0pCiAgfSwKICBmdW5jdGlvbigpIHsKICAgIHZhciBfdm0gPSB0aGlzCiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnQKICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogICAgcmV0dXJuIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAibW9iaWxlLWxvZ28iIH0sIFsKICAgICAgX2MoImEiLCB7IGF0dHJzOiB7IGhyZWY6ICJpbmRleC5odG1sIiB9IH0pCiAgICBdKQogIH0sCiAgZnVuY3Rpb24oKSB7CiAgICB2YXIgX3ZtID0gdGhpcwogICAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2gKICAgIHJldHVybiBfYygidWwiLCBbCiAgICAgIF9jKCJsaSIsIFsKICAgICAgICBfYygiYSIsIHsgYXR0cnM6IHsgaHJlZjogImluZGV4LWFuaW1hdGlvbi10ZXh0LTEuaHRtbCIgfSB9LCBbCiAgICAgICAgICBfdm0uX3YoImFuaW1hdGlvbiB0ZXh0IDEiKQogICAgICAgIF0pCiAgICAgIF0pCiAgICBdKQogIH0sCiAgZnVuY3Rpb24oKSB7CiAgICB2YXIgX3ZtID0gdGhpcwogICAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2gKICAgIHJldHVybiBfYygibGkiLCBbCiAgICAgIF9jKCJhIiwgeyBhdHRyczogeyBocmVmOiAiYWJvdXQuaHRtbCIgfSB9LCBbX3ZtLl92KCJhYm91dCIpXSkKICAgIF0pCiAgfSwKICBmdW5jdGlvbigpIHsKICAgIHZhciBfdm0gPSB0aGlzCiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnQKICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogICAgcmV0dXJuIF9jKCJsaSIsIFsKICAgICAgX2MoImEiLCB7IGF0dHJzOiB7IGhyZWY6ICJnYWxsZXJ5Lmh0bWwiIH0gfSwgW192bS5fdigiZ2FsbGVyeSIpXSkKICAgIF0pCiAgfSwKICBmdW5jdGlvbigpIHsKICAgIHZhciBfdm0gPSB0aGlzCiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnQKICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogICAgcmV0dXJuIF9jKCJsaSIsIFsKICAgICAgX2MoImEiLCB7IGF0dHJzOiB7IGhyZWY6ICIjIiB9IH0sIFtfdm0uX3YoInBhZ2VzIildKSwKICAgICAgX2MoInVsIiwgWwogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF9jKCJhIiwgeyBhdHRyczogeyBocmVmOiAiYmxvZy1saXN0Lmh0bWwiIH0gfSwgW192bS5fdigiYmxvZyBsaXN0IildKQogICAgICAgIF0pLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF9jKCJhIiwgeyBhdHRyczogeyBocmVmOiAiYmxvZy1kZXRhaWxzLmh0bWwiIH0gfSwgWwogICAgICAgICAgICBfdm0uX3YoImJsb2cgZGV0YWlscyIpCiAgICAgICAgICBdKQogICAgICAgIF0pLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF9jKCJhIiwgeyBhdHRyczogeyBocmVmOiAic2hvcC1ncmlkLmh0bWwiIH0gfSwgW192bS5fdigic2hvcCBncmlkIildKQogICAgICAgIF0pLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF9jKCJhIiwgeyBhdHRyczogeyBocmVmOiAic2hvcC1saXN0Lmh0bWwiIH0gfSwgW192bS5fdigic2hvcCBsaXN0IildKQogICAgICAgIF0pLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF9jKCJhIiwgeyBhdHRyczogeyBocmVmOiAicHJvZHVjdC1kZXRhaWxzLmh0bWwiIH0gfSwgWwogICAgICAgICAgICBfdm0uX3YoIlByb2R1Y3QgZGV0YWlscyIpCiAgICAgICAgICBdKQogICAgICAgIF0pLAogICAgICAgIF9jKCJsaSIsIFtfYygiYSIsIHsgYXR0cnM6IHsgaHJlZjogInRlYW0uaHRtbCIgfSB9LCBbX3ZtLl92KCJ0ZWFtIildKV0pLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF9jKCJhIiwgeyBhdHRyczogeyBocmVmOiAidGVhbS1kZXRhaWxzLmh0bWwiIH0gfSwgWwogICAgICAgICAgICBfdm0uX3YoInRlYW0gZGV0YWlscyIpCiAgICAgICAgICBdKQogICAgICAgIF0pLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF9jKCJhIiwgeyBhdHRyczogeyBocmVmOiAic2VydmljZS5odG1sIiB9IH0sIFtfdm0uX3YoInNlcnZpY2UiKV0pCiAgICAgICAgXSksCiAgICAgICAgX2MoImxpIiwgW19jKCJhIiwgeyBhdHRyczogeyBocmVmOiAiY2FydC5odG1sIiB9IH0sIFtfdm0uX3YoImNhcnQiKV0pXSksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX2MoImEiLCB7IGF0dHJzOiB7IGhyZWY6ICJ3aXNobGlzdC5odG1sIiB9IH0sIFtfdm0uX3YoIndpc2hsaXN0IildKQogICAgICAgIF0pLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF9jKCJhIiwgeyBhdHRyczogeyBocmVmOiAiYXBwb2lubWVudC5odG1sIiB9IH0sIFsKICAgICAgICAgICAgX3ZtLl92KCJhcHBvaW5tZW50IikKICAgICAgICAgIF0pCiAgICAgICAgXSkKICAgICAgXSkKICAgIF0pCiAgfSwKICBmdW5jdGlvbigpIHsKICAgIHZhciBfdm0gPSB0aGlzCiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnQKICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogICAgcmV0dXJuIF9jKCJsaSIsIFsKICAgICAgX2MoImEiLCB7IGF0dHJzOiB7IGhyZWY6ICJwcm9kdWN0LWRldGFpbHMuaHRtbCIgfSB9LCBbX3ZtLl92KCJzaG9wIildKSwKICAgICAgX2MoInVsIiwgWwogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF9jKCJhIiwgeyBhdHRyczogeyBocmVmOiAic2hvcC1ncmlkLmh0bWwiIH0gfSwgW192bS5fdigic2hvcCBncmlkIildKQogICAgICAgIF0pLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF9jKCJhIiwgeyBhdHRyczogeyBocmVmOiAic2hvcC1saXN0Lmh0bWwiIH0gfSwgW192bS5fdigic2hvcCBsaXN0IildKQogICAgICAgIF0pCiAgICAgIF0pCiAgICBdKQogIH0sCiAgZnVuY3Rpb24oKSB7CiAgICB2YXIgX3ZtID0gdGhpcwogICAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2gKICAgIHJldHVybiBfYygibGkiLCBbCiAgICAgIF9jKCJhIiwgeyBhdHRyczogeyBocmVmOiAiY29udGFjdC5odG1sIiB9IH0sIFtfdm0uX3YoImNvbnRhY3QgdXMiKV0pCiAgICBdKQogIH0KXQpyZW5kZXIuX3dpdGhTdHJpcHBlZCA9IHRydWUKCmV4cG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0="}]}